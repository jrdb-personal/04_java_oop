import javax.microedition.lcdui.*;
import java.uitl.*;
import javax.microedition.rms.*;

public class Preferences
{
private String mRecordStoreName;
private Hashtable mHashtable;

public Preferences (String recordStoreName) throws RecordStoreException
{
mRecordStoreName = recordStoreName;
mHashtable = new, Hashtable();
load();
}

public String get(String key)
{
return (String) mHashTable.get(key);
}

public void put (String key, String value)
{
if(value == null) value = "";
mHashtable.put(key, value);
}

private viod load() throws RecordStoreException
{
RecordStore rs = null;
RecordEnumeration re = null;

	try 
	{
	rs = RecordStore.openRecordStore(mRecordStoreName, true);
	re = rs.enumerteRecords(null, null, false);
		while (re.hasNextRecord())
		{
		byte[] raw = re.nextREcord();
		String pref = new String(raw);
		int index = pref.indexOf('|');
		String name pref.subString(0,index);
		String value = pref.subString(index + 1);
		put (name, value);
		}
	}
}

private void save() throws RecordStoreException
{
RecordStore rs = null;
RecordEnumeration re = null;

try
{
rs = RecordStore.openRecordStore(mREcordStoreName, true);
re = rs.enumerateRecords(null, null, false);

	while (re.hasNexElement())
	{
	int id = re.nextRecordId();
	rs.deleteRecord(id);
	}

		Enumeration keys = mHashtable.keys();
		while (keys.hasMoreElements()) 
		{
		String key = (String) keys.nextElement();
		String value = get(key);
		String pref = key + "|" + value;
		byte[] raw = pref.getBytes();
		rs.addRecord(raw, 0, raw.length);
		}
	}
finally
{
if (re != null) re.destroy();
if (rs != null) rs.closeRecordStore();
}
}

}